#!/usr/bin/env php
<?php
namespace BlazePHP;
use \BlazePHP\Globals as G;
use \BlazePHP\Message as M;
use \BlazePHP\CLI;
require(dirname(__DIR__).'/init/CLI.init.php');

// Create the CLI object and pass in the arguments
G::$cli = new CLI($argc, $argv);

// CLI Option - Module type to create.
$o              = new CLI\Option();
$o->long        = 'module-type';
$o->short       = 't';
$o->required    = true;
$o->description = 'Module type to create.  Options: [shared,cli,api,www,composer]';
G::$cli->addOption($o);

// CLI Option - Module name
$o              = new CLI\Option();
$o->long        = 'module-name';
$o->short       = 'n';
$o->required    = true;
$o->description = 'The name of the module to create.  The name must match the regex pattern /^[a-z][a-z_0-9]*$/ in order to be accepted.';
G::$cli->addOption($o);

// Initilize the CLI
initCLI::parse(G::$cli);

class O extends Struct
{
	public static $moduleType;
	public static $moduleName;
	public static $namespace;

	public static $layouts;
	public static $license;
}
O::$moduleType = G::$cli->moduleType;
O::$moduleName = G::$cli->moduleName;
$parts = explode('_', O::$moduleName);
$partsFormatted = array();
foreach($parts as $part) {
	$partsFormatted[] = ucfirst(strtolower($part));
}
O::$namespace = implode('_', $partsFormatted);
unset($parts, $partsFormatted);

O::$layouts = array(
	 'shared' => array(
		 'conf'
		,'model'
		,'manager'
	)
	,'cli' => array(
		 'bin'
		,'conf'
		,'model'
		,'manager'
	)
	,'api' => array(
		 'public'
		,'conf'
		,'controller'
		,'model'
		,'manager'
	)
	,'www' => array(
		 'public'
		,'views'
		,'conf'
		,'model'
		,'manager'
		,'controller'
		,'view'
		,'view-element'
	)
	,'composer' => array(
		 'vendor'
	)
);

$license = array();
$license[] = '/**';
$license[] = ' *';
$license[] = ' * BlazePHP.com - A framework for high performance';
$license[] = ' * Copyright 2012 - '.date('Y').', BlazePHP.com';
$license[] = ' *';
$license[] = ' * Licensed under The MIT License';
$license[] = ' * Any redistribution of this file\'s contents, both';
$license[] = ' * as a whole, or in part, must retain the above information';
$license[] = ' *';
$license[] = ' * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)';
$license[] = ' * @copyright     Copyright 2012 - 2013, BlazePHP.com';
$license[] = ' * @link          http://blazePHP.com';
$license[] = ' *';
$license[] = ' */';
O::$license = implode("\n", $license);
unset($license);

if(!preg_match('/^[a-z][a-z_0-9]*$/', O::$moduleName)) {
	$message = 'ERROR: The module name ['.O::$moduleName.'] specified is invalid. The name must match the regex pattern /^[a-z][a-z_0-9]*$/ in order to be accepted.';
	M::error($message, M::ADD_NEW_LINE, 'red');
	exit;
}
if(!in_array(O::$moduleType, array_keys(O::$layouts))) {
	$message = 'ERROR: The module type ['.O::$moduleType.'] is not valid. Options: [shared,cli,api,www].';
	M::error($message, M::ADD_NEW_LINE, 'red');
	exit;
}


$moduleLoc = ABS_ROOT.'/module/mod-'.O::$moduleName;

if(file_exists($moduleLoc)) {
	$message = 'ERROR: The module specified already exist ['.$moduleLoc.']';
	M::error($message, M::ADD_NEW_LINE, 'red');
	exit;
}


M::send('Make directory structure for the '.O::$moduleType.' module ['.O::$moduleName.']:', M::LEVEL_0, M::ADD_NEW_LINE, 'yellow');
M::send('    mkdir '.$moduleLoc, M::LEVEL_0, M::ADD_NEW_LINE);
mkdir($moduleLoc);
foreach(O::$layouts[O::$moduleType] as $dir) {
	M::send('    mkdir '.$moduleLoc.'/'.$dir, M::LEVEL_0, M::ADD_NEW_LINE);
	mkdir($moduleLoc.'/'.$dir);

	if($dir === 'conf') {

		M::send('        Writing default config: ', M::LEVEL_0, M::NO_NEW_LINE);

		$config = array();
		$config[] = '<?php';
		$config[] = O::$license;
		$config[] = 'namespace BlazePHP;';
		$config[] = 'use BlazePHP\Globals as G;';
		$config[] = 'use BlazePHP\Database\ConnectionBoss;';
		$config[] = '';
		$config[] = 'class DatabaseConfig';
		$config[] = '{';
		$config[] = '	public function __construct()';
		$config[] = '	{';
		$config[] = '		$this->load_data_config = true;';
		$config[] = '';
		$config[] = '		/* Sample MySQL database connection object */';
		$config[] = '		$this->test_mysql = new \stdClass();';
		$config[] = '		$this->test_mysql->master = \BlazePHP\Database\ConnectionBoss::build(\'MySQL\');';
		$config[] = '		$this->test_mysql->master->hostname = \'\';';
		$config[] = '		// $this->test_mysql->master->port     = \'3306\';';
		$config[] = '		$this->test_mysql->master->username = \'\';';
		$config[] = '		$this->test_mysql->master->password = \'\';';
		$config[] = '		$this->test_mysql->master->database = \'\';';
		$config[] = '		$this->test_mysql->slave =& $this->test_mysql->master;';
		$config[] = '';
		$config[] = '		/* Sample Postgres database connection object */';
		$config[] = '		$this->test_postgres = new \stdClass();';
		$config[] = '		$this->test_postgres->master = \BlazePHP\Database\ConnectionBoss::build(\'Postgres\');';
		$config[] = '		$this->test_postgres->master->hostname = \'\';';
		$config[] = '		// $this->test_postgres->master->port     = \'5432\';';
		$config[] = '		$this->test_postgres->master->username = \'\';';
		$config[] = '		$this->test_postgres->master->password = \'\';';
		$config[] = '		$this->test_postgres->master->database = \'\';';
		$config[] = '		$this->test_postgres->slave =& $this->test_postgres->master;';
		$config[] = '	}';
		$config[] = '}';
		$config[] = '';
		$config[] = '/* Initiate the database configuration */';
		$config[] = 'G::$db = new DatabaseConfig();';

		if(in_array(O::$moduleType, array('api', 'www'))) {
			$config[] = '';
			$config[] = '';
			$config[] = 'class Route extends \BlazePHP\Route';
			$config[] = '{';
			$config[] = '	public function __construct()';
			$config[] = '	{';
			$config[] = '		// %i - the argument is treated as an unsigned integer';
			$config[] = '		// %s - the argument is treated as and presented as a string matching the following pattern \'[a-zA-Z0-9_\-\.]\'.';
			$config[] = '';
			$config[] = '		$this->alias(\'/mycontroller/index\',                    \'/\');';
			$config[] = '		$this->alias(\'/mycontroller/myaction/id:$i1\',          \'/myAlias/%i\');';
			$config[] = '';
			$config[] = '		parent::__construct();';
			$config[] = '	}';
			$config[] = '}';
			$config[] = '';
			$config[] = '/* Initiate the database configuration */';
			$config[] = 'G::$route = new Route();';
		}

		$confFh = fopen($moduleLoc.'/conf/default.conf.php', 'a');
		fwrite($confFh, implode("\n", $config));
		fclose($confFh);

		M::send('SUCCESS', M::LEVEL_0, M::ADD_NEW_LINE, 'green');
	}
	else if($dir === 'public') {
		M::send('        Writing public/index.php: ', M::LEVEL_0, M::NO_NEW_LINE);

		$index = array();
		$index[] = '<?php';
		$index[] = O::$license;
		$index[] = 'namespace '.O::$namespace.';';
		$index[] = 'use BlazePHP\Globals as G;';
		$index[] = '';
		$index[] = 'define(\'MODULE_ROOT\',      dirname(__DIR__));';
		$index[] = 'define(\'MODULE_NAMESPACE\', \''.O::$namespace.'\');';
		$index[] = '';
		$index[] = 'require(dirname(dirname(dirname(__DIR__))).\'/init/httpd.init.php\');';
		$index[] = '';

		$indexFh = fopen($moduleLoc.'/public/index.php', 'a');
		fwrite($indexFh, implode("\n", $index));
		fclose($indexFh);

		M::send('SUCCESS', M::LEVEL_0, M::ADD_NEW_LINE, 'green');
	}
	else if($dir === 'controller') {
		M::send('        Writing controller/mycontroller.ctlr.php: ', M::LEVEL_0, M::NO_NEW_LINE);

		$controller = array();
		$controller[] = '<?php';
		$controller[] = O::$license;
		$controller[] = 'namespace BlazePHP_Www;';
		$controller[] = '';
		$controller[] = 'class MyControllerCTLR extends \BlazePHP\Controller';
		$controller[] = '{';
		$controller[] = '	public function index()';
		$controller[] = '	{';
		$controller[] = '		self::myaction();';
		$controller[] = '	}';
		$controller[] = '';
		$controller[] = '	public function myaction()';
		$controller[] = '	{';
		$controller[] = '		$this->renderJSON(array(\'success\' => \'My Action works!\'));';
		$controller[] = '	}';
		$controller[] = '}';

		$controllerFh = fopen($moduleLoc.'/controller/MyController.ctlr.php', 'a');
		fwrite($controllerFh, implode("\n", $controller));
		fclose($controllerFh);

		M::send('SUCCESS', M::LEVEL_0, M::ADD_NEW_LINE, 'green');

	}
	else {
		touch($moduleLoc.'/'.$dir.'/empty');
	}
}
M::send('SUCCESS', M::LEVEL_0, M::ADD_NEW_LINE, 'green');

if(O::$moduleType === 'composer') {
	M::send('Creating the composer configuration and installing the binary: ', M::LEVEL_0, M::ADD_NEW_LINE);

	$installerLoc = $moduleLoc.'/composer-setup.php';

	copy('https://getcomposer.org/installer', $installerLoc);
	if (hash_file('SHA384', $installerLoc) === '669656bab3166a7aff8a7506b8cb2d1c292f042046c5a994c43155c0be6190fa0355160742ab2e1c88d40d5be660b410') {
		M::send('    Installer verified', M::LEVEL_1, M::ADD_NEW_LINE, 'green');
	}
	else {
		$message = 'ERROR: Installer corrupt';
		M::error($message, M::ADD_NEW_LINE, 'red');
		unlink($installerLoc);
	}

	// \Message::send('INSTALLING: ', \Message::LEVEL_1, \Message::ADD_NEW_LINE);
	M::send('INSTALLING: ', M::LEVEL_1, M::ADD_NEW_LINE, 'green');
	$argv = array();
	$argv[] =
	// printre($argv);
	$argc = 1;
	// include($installerLoc); //composer-setup.php
	$installerOptions = '--install-dir='.dirname($installerLoc);
	echo `/usr/bin/env php $installerLoc $installerOptions`;

	M::sendLineBreak(M::LEVEL_1, 1 /* quantity */);
	M::send('SUCCESS', M::LEVEL_0, M::ADD_NEW_LINE, 'green');
}
else {
	$makeModuleMap = __DIR__.'/makemodulecontrollersmap';
	$moduleName    = O::$moduleName;
	echo `$makeModuleMap --module-name=$moduleName`;
}
