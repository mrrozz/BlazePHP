#!/usr/bin/env php
<?php
/**
 *
 * BlazePHP.com - A framework for high performance
 * Copyright 2012 - 2017, BlazePHP.com
 *
 * Licensed under The MIT License
 * Any redistribution of this file's contents, both
 * as a whole, or in part, must retain the above information
 *
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 * @copyright     2012 - 2017, BlazePHP.com
 * @link          http://blazePHP.com
 * @package       Blaze.
 */
namespace BlazePHP;
use \BlazePHP\Globals as G;
use \BlazePHP\Message as M;
use \BlazePHP\CLI;
require(dirname(__DIR__).'/init/CLI.init.php');

// Create the CLI object and pass in the arguments
G::$cli = new CLI($argc, $argv);




// Initilize the CLI
initCLI::parse(G::$cli);


M::send('MSG: Gathering the list of modules: ', M::LEVEL_1, M::ADD_NEW_LINE);


$fileList = array();
$mapList  = array();
$moduleListHandle = opendir(dirname(__DIR__).'/module');
while($module = readdir($moduleListHandle)) {
	if(in_array($module, array('.', '..', 'object.map.php')) || !preg_match('/^mod\-/', $module)) {
		continue;
	}

	M::send('MSG: Processing module ['.$module.']', M::LEVEL_1, M::NO_NEW_LINE);

	$managerPath = realpath(dirname(__DIR__).'/module/'.$module.'/manager');
	if(file_exists($managerPath) && is_dir($managerPath)) {
		$directory   = new \RecursiveDirectoryIterator($managerPath);
		$iterator    = new \RecursiveIteratorIterator($directory);
		$phpFiles    = new \RegexIterator($iterator, '/^.+\.class\.php$/i', \RecursiveRegexIterator::GET_MATCH);
		foreach($phpFiles as $name => $nullMe) {
			$fileList[] = $name;
		}
	}


	$modelPath = realpath(dirname(__DIR__).'/module/'.$module.'/model');
	if(file_exists($modelPath) && is_dir($modelPath)) {
		$directory   = new \RecursiveDirectoryIterator($modelPath);
		$iterator    = new \RecursiveIteratorIterator($directory);
		$phpFiles    = new \RegexIterator($iterator, '/^.+\.class\.php$/i', \RecursiveRegexIterator::GET_MATCH);
		foreach($phpFiles as $name => $nullMe) {
			if(preg_match('/\/sys\/sys_/', $name)) {
				continue;
			}
			$fileList[] = $name;
		}
	}


	$libPath = realpath(dirname(__DIR__).'/module/'.$module.'/lib');
	if(file_exists($libPath) && is_dir($libPath)) {
		$directory   = new \RecursiveDirectoryIterator($libPath);
		$iterator    = new \RecursiveIteratorIterator($directory);
		$phpFiles    = new \RegexIterator($iterator, '/^.+\.class\.php$/i', \RecursiveRegexIterator::GET_MATCH);
		foreach($phpFiles as $name => $nullMe) {
			$fileList[] = $name;
		}
	}

	$controllerPath = realpath(dirname(__DIR__).'/module/'.$module.'/controller');
	if(file_exists($controllerPath) && is_dir($controllerPath)) {
		$directory   = new \RecursiveDirectoryIterator($controllerPath);
		$iterator    = new \RecursiveIteratorIterator($directory);
		$phpFiles    = new \RegexIterator($iterator, '/^.+\.ctlr\.php$/i', \RecursiveRegexIterator::GET_MATCH);
		foreach($phpFiles as $name => $nullMe) {
			$fileList[] = $name;
		}
	}

	M::send(' SUCCESS', M::LEVEL_1, M::ADD_NEW_LINE, 'green');
}


M::send('MSG: Writing '.count($fileList).' map(s) to file [{BlazePHP_ROOT}/module/object.map.php]', M::LEVEL_1, M::NO_NEW_LINE);

foreach($fileList as $name){
	// echo "$name\n";
	$parts        = explode('/module/', $name);
	$fileLocation = $parts[1];
	$parts        = explode('/', $parts[1]);
	$moduleRaw    = array_shift($parts);
	$moduleParts  = explode('-', $moduleRaw);
	$module       = ucfirst($moduleParts[1]);
	$dirName      = array_shift($parts); // purge the 'manager' directory
	$classRaw     = array_pop($parts); // grab the class file off the end of the array
	$class        = preg_replace('/\.(ctlr|class)\.php$/', '', $classRaw);
	if(preg_match('/\.ctlr\.php$/', $classRaw)) {
		$class .= 'CTLR';
	}


	$moduleNamespacePartsRaw = explode('_', $module);
	$moduleNamespaceParts    = array();
	foreach($moduleNamespacePartsRaw as $part) {
		$moduleNamespaceParts[] = ucfirst($part);
	}
	$moduleNamespace = implode($moduleNamespaceParts);
	// print_r(array($parts, $dirName));
	if(count($parts) > 0) {
		$namespacePath = $moduleNamespace.'\\'.implode('\\', $parts).'\\'.$class;
	}
	elseif(!in_array($dirName, array('controller', 'model', 'manager'))) {
		$namespacePath = $moduleNamespace.'\\'.ucfirst(strtolower($dirName)).'\\'.$class;
	}
	else{
		$namespacePath = $moduleNamespace.'\\'.$class;
	}

	$mapList[] = '\''.$namespacePath.'\' => \''.$fileLocation.'\'';
}

// printre($mapList);
$header   = array();
$header[] = '/* ';
$header[] = ' *';
$header[] = ' * This file was generated by bin/makemodulemap.  To rebuild the list of module ';
$header[] = ' * classes, run the following command.';
$header[] = ' * ';
$header[] = ' *  {BlazePHP_ROOT}/bin/makemodulemap';
$header[] = ' * ';
$header[] = ' * This list was generated on '.date('Y-m-d H:i:s T');
$header[] = ' *';
$header[] = ' */';
// printre(implode("\n", $header));

$content = array();
$content[] = '<?php';
$content[] = implode("\n", $header);
$content[] = '';
$content[] = 'namespace BlazePHP;';
$content[] = 'use \BlazePHP\Globals as G;';
$content[] = '';
$content[] = 'G::$moduleMap = array(';
$content[] = "\t ".implode("\n\t,", $mapList);
$content[] = ');';
$content[] = '';

$mapHandle = fopen(dirname(__DIR__).'/module/object.map.php', 'w');
$content = implode("\n", $content);
fwrite($mapHandle, $content, strlen($content));

M::send(' SUCCESS', M::LEVEL_1, M::ADD_NEW_LINE, 'green');
