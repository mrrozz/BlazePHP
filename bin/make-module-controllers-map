#!/usr/bin/env php
<?php
/**
 *
 * BlazePHP.com - A framework for high performance
 * Copyright 2012 - 2017, BlazePHP.com
 *
 * Licensed under The MIT License
 * Any redistribution of this file's contents, both
 * as a whole, or in part, must retain the above information
 *
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 * @copyright     2012 - 2017, BlazePHP.com
 * @link          http://blazePHP.com
 * @package       Blaze.
 */
namespace BlazePHP;
use \BlazePHP\Globals as G;
use \BlazePHP\Message as M;
use \BlazePHP\CLI;
require(dirname(__DIR__).'/init/CLI.init.php');

// Create the CLI object and pass in the arguments
G::$cli = new CLI($argc, $argv);


// CLI Option - Module to make a controller map for.
$o              = new CLI\Option();
$o->long        = 'module-name';
$o->required    = true;
$o->description = 'Module to make a controller map for.';
G::$cli->addOption($o);


// Initilize the CLI
initCLI::parse(G::$cli);

class O extends Struct
{
	public static $moduleName;
}
O::$moduleName = G::$cli->moduleName;

if(!preg_match('/^[a-z][a-z_0-9]*$/', O::$moduleName)) {
	$message = 'ERROR: The module name ['.O::$moduleName.'] is invalid.';
	M::error($message, M::ADD_NEW_LINE, 'red');
	exit;
}
if(!file_exists(dirname(__DIR__).'/module/mod-'.O::$moduleName)) {
	$message = 'ERROR: The module ['.O::$moduleName.'] either does not exists.';
	M::error($message, M::ADD_NEW_LINE, 'red');
	exit;
}
if(!file_exists(dirname(__DIR__).'/module/mod-'.O::$moduleName.'/controller')) {
	$message = 'ERROR: The module ['.O::$moduleName.'] does not have a controller directory';
	M::error($message, M::ADD_NEW_LINE, 'red');
	exit;
}

M::send('MSG: Gathering the list of controllers: ', M::LEVEL_1, M::ADD_NEW_LINE);


$fileList      = array();
$mapList       = array();
$controllerDir = dirname(__DIR__).'/module/mod-'.O::$moduleName.'/controller';
$controllerListHandle = opendir($controllerDir);
while($controller = readdir($controllerListHandle)) {
	if(in_array($controller, array('.', '..', 'controller.map.php')) || !preg_match('/.ctlr.php$/', $controller)) {
		continue;
	}

	M::send('MSG: Processing module ['.$controller.']', M::LEVEL_1, M::NO_NEW_LINE);

	$className = str_replace('.ctlr.php', '', $controller).'CTLR';
	$routeName = strtolower(str_replace('.ctlr.php', '', $controller));
	$mapList[$routeName] = array(
		 'location'  => $controllerDir.'/'.$controller
		,'className' => $className
	);

	M::send(' SUCCESS', M::LEVEL_1, M::ADD_NEW_LINE, 'green');
}


M::send('MSG: Writing '.count($mapList).' map(s) to file ['.$controllerDir.']', M::LEVEL_1, M::NO_NEW_LINE);

$mapListText = array();
foreach($mapList as $mapName => $info) {
	$mapListText[] = '\''.$mapName.'\' => array('
	."\n\t\t".' \'location\'  => \''.$info['location'].'\''
	."\n\t\t".',\'className\' => \''.$info['className'].'\''
	."\n\t".')';
}
// printre($mapListText);
// printre($mapList);
$header   = array();
$header[] = '/* ';
$header[] = ' *';
$header[] = ' * This file was generated by bin/makemodulecontrollersmap.  To rebuild the list of module ';
$header[] = ' * classes, run the following command.';
$header[] = ' * ';
$header[] = ' *  {BlazePHP_ROOT}/bin/makemodulecontrollersmap --module-name='.O::$moduleName;
$header[] = ' * ';
$header[] = ' * This list was generated on '.date('Y-m-d H:i:s T');
$header[] = ' *';
$header[] = ' */';
// printre(implode("\n", $header));

$content = array();
$content[] = '<?php';
$content[] = implode("\n", $header);
$content[] = '';
$content[] = 'namespace BlazePHP;';
$content[] = 'use \BlazePHP\Globals as G;';
$content[] = '';
$content[] = 'G::$controllerMap = array(';
$content[] = "\t ".implode("\n\t,", $mapListText);
$content[] = ');';
$content[] = '';
// printre(implode("\n", $content));

$mapHandle = fopen($controllerDir.'/controller.map.php', 'w');
$content = implode("\n", $content);
fwrite($mapHandle, $content, strlen($content));

M::send(' SUCCESS', M::LEVEL_1, M::ADD_NEW_LINE, 'green');
