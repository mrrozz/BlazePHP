#!/usr/bin/env php
<?php
/**
 *
 * BlazePHP.com - A framework for high performance
 * Copyright 2012 - 2017, BlazePHP.com
 *
 * Licensed under The MIT License
 * Any redistribution of this file's contents, both
 * as a whole, or in part, must retain the above information
 *
 * @license       MIT License (http://www.opensource.org/licenses/mit-license.php)
 * @copyright     2012 - 2017, BlazePHP.com
 * @link          http://blazePHP.com
 * @package       Blaze.
 */
namespace BlazePHP;
use \BlazePHP\Globals as G;
use \BlazePHP\Message as M;
use \BlazePHP\CLI;
use \BlazePHP\Struct;
require(dirname(dirname(__DIR__)).'/init/BlazeTest.init.php');

// Create the CLI object and pass in the arguments
G::$cli = new CLI($argc, $argv);


// CLI Option - Test file directory location
$o              = new CLI\Option();
$o->long        = 'test-dir';
$o->short       = 'T';
$o->required    = false;
$o->default     = ABS_ROOT.'/test/case';
$o->description = 'Test file directory location';
G::$cli->addOption($o);


// CLI Flag - Die on error
$f              = new CLI\Flag();
$f->long        = 'die-on-error';
$f->short       = 'D';
$f->description = 'Die on error';
G::$cli->addFlag($f);

// CLI Option - Filter the test cases by keywords, CSV.
$o              = new CLI\Option();
$o->long        = 'filter-csv';
$o->short       = 'F';
$o->required    = false;
$o->default     = null;
$o->description = 'Filter the test cases by keywords, CSV.';
G::$cli->addOption($o);


// Initilize the CLI
initCLI::parse(G::$cli);



class O extends Struct
{
	// Options/Flags
	public static $testDir;
	public static $dieOnError;
	public static $filterCSV;

	// Script globals
	public static $testCases;
	public static $case;
}
O::$testDir    = G::$cli->testDir;
O::$dieOnError = G::$cli->dieOnError;
O::$filterCSV  = G::$cli->filterCsv;

O::$testCases  = array();



//
// Validate the test directory
//
if(!file_exists(O::$testDir)) {
	$message = 'Error: The direcotry ['.O::$testDir.'] does not exist.';
	M::error('ERROR: '.$message, M::ADD_NEW_LINE, 'red');
	exit;
}
else if(!is_dir(O::$testDir)) {
	$message = 'Error: ['.O::$testDir.'] is not a valid directory';
	M::error('ERROR: '.$message, M::ADD_NEW_LINE, 'red');
	exit;
}

try {
	// Filter files that end with *Test.php firstly
	$filters = array('/\.test\.php$/');

	// Consider the filter CSV if it is provided
	if(O::$filterCSV !== null) {
		$filterCSVRaw = explode(',', O::$filterCSV);
		foreach($filterCSVRaw as $filter) {
			$filters[] = '/'.$filter.'/';
		}
	}

	$dh = opendir(O::$testDir);
	while(false !== ($file = readdir($dh))) {
		$addFile = true;
		foreach($filters as $filter) {
			if(!preg_match($filter, $file)) {
				$addFile = false;
			}
		}
		if($addFile === true) {
			O::$testCases[] = O::$testDir.'/'.$file;
		}
	}
}
catch(\Exception $e) {
	$message = 'Error: Reading the directory ['.O::$testDir.'] has failed. '."\n".$e->getMessage();
	M::error('ERROR: '.$message, M::ADD_NEW_LINE, 'red');
	exit;
}

$testCaseCount = count(O::$testCases);
if($testCaseCount <= 0) {
	$message = 'There are no test cases found in the location specified ['.O::$testDir.'].';
	if(!empty(O::$filterCSV)) {
		$message .= ' Check the filters applied ['.O::$filterCSV.']';
	}
	M::error('ERROR: '.$message, M::ADD_NEW_LINE, 'red');
	exit;
}


//
// Start the test sequence with the found files
//
M::sendLineBreak(M::LEVEL_1);
$message = 'Starting test sequence with ['.count(O::$testCases).'] test cases';
M::send($message, M::LEVEL_1, M::ADD_NEW_LINE);
M::sendLineBreak(M::LEVEL_1);


foreach(O::$testCases as $caseFile) {
	try {
		require_once($caseFile);
		$fileBaseName  = basename($caseFile);
		$classParts    = explode('.', preg_replace('/\.php$/', '', $fileBaseName));
		array_pop($classParts);
		$classBaseName = implode('', $classParts).'Test';
		$class         = '\\BlazeTest\\'.$classBaseName;
		O::$case       = new $class;
		$classWords    = preg_split('/(?=[A-Z])/',$classBaseName);
		$classLabel    = implode(' ', $classWords);

		$message = '    [Begin: '.G::$cli->colorize($classLabel, 'blue').']';
		M::send($message, M::LEVEL_1, M::ADD_NEW_LINE);

		$ref = new \ReflectionClass(O::$case);
		$methods = $ref->getMethods();
		$testNo = 1;

		foreach($methods as $method) {
			if(preg_match('/^test/', $method->name)) {
				$methodWords = preg_split('/(?=[A-Z])/',$method->name);
				array_shift($methodWords);
				$methodLabel = implode(' ', $methodWords);


				$message = '        '.str_pad((string)$testNo++, 4, ' ', STR_PAD_LEFT).': '.$methodLabel.' -> ';
				M::$padLength = 60;
				M::send(M::pad($message), M::LEVEL_1, M::NO_NEW_LINE);

				try {
					O::$case->executeTest($method->name);
					M::send(' SUCCESS', M::LEVEL_1, M::ADD_NEW_LINE, 'green');
				}
				catch(\Exception $e) {

					$message = 'FAIL, Reason: '.$e->getMessage();
					M::send($message, M::LEVEL_1, M::ADD_NEW_LINE);
					M::sendLineBreak(M::LEVEL_1);

					if(O::$dieOnError === true) {
						exit;
					}
				}
			}
		}

		$message = '    [End:   '.G::$cli->colorize($classLabel, 'yellow').']';
		M::send($message, M::LEVEL_1, M::ADD_NEW_LINE);
	}
	catch(\Exception $e) {
		printre($e->getMessage());
		// echo "\n".'Error: The test case class ['.$class.'] was not loaded from file ['.$caseFile.'] due to the following reason(s):'."\n".$e->getMessage()."\n\n";
		exit;
	}
}
